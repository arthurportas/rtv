<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/jee
						    http://www.springframework.org/schema/jee/spring-jee-3.0.xsd">

	<context:component-scan base-package="com.realtv.mvc"/>

	<mvc:annotation-driven />

	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/"/>
		<property name="suffix" value=".jsp"/>
	</bean>

	<mvc:resources mapping="/static/**" location="/"/>

	<mvc:default-servlet-handler />
	<!-- Use Springs JNDI support to look up JMS Connection Factory and Queue definitions from the
	     container. This means that specific connection details are not embedded in the application
	 -->
	<jee:jndi-lookup id="mqConnectionFactory" jndi-name="java:comp/env/jms/mqConnectionFactory" />
	<jee:jndi-lookup id="testQueueOne" jndi-name="java:comp/env/jms/testQueueOne" />
	<jee:jndi-lookup id="testQueueTwo" jndi-name="java:comp/env/jms/testQueueTwo" />

<!-- JMSTemplate is a Spring template that allows us to communicate with
		 a message broker via JMS. JMSTemplate takes care of boiler plate code such as exception handling
		 and resource management such as connection pooling. This allows us concentrate on solving the 'business'
		 problem. We supply the JMS template with the connection factory mentioned above
     -->
	<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<property name="connectionFactory" ref="mqConnectionFactory" />
	</bean>
	
	<!-- MessageSender is a simple POJO that we supply with a JMSTemplate and
    	 the Queue that we want to send messages to
     -->
	<bean id="testMessageSender" class="com.realtv.messaging.TestMessageSender">
		<property name="jmsTemplate" ref="jmsTemplate"/>
		<property name="testQueue" ref="testQueueTwo"/>
	</bean>


</beans>